--- 
wordpress_id: 1696
layout: post
title: Transactional memory with data invariants
wordpress_url: http://passingcuriosity.com/2006/transactional-memory-with-data-invariants/
---
<span class="title">Transactional memory with data invariants</span> by Tim Harris and Simon Peyton Jones. To appear in TRANSACT '06 (<a href="http://research.microsoft.com/~tharris/papers/2006-transact.pdf">PDF</a>).<br /><br />I <a href="http://troacss.blogspot.com/2006/04/transactional-memory-with-data.html">comment previously</a> on a draft version of this paper. In this 'final' version the authors have removed the wrapper function which converted predicates (<code>:: STM a -> STM Bool</code>) into actions that raise exceptions when the invariant doesn't hold (<code>:: STM a -> STM ()</code>) leaving the interface a little more consistent.<br /><br />They have extended the STM monad to use phantom types to restrict the operations an STM action can perform (<code>ReadOnly</code> or <code>Full</code>) to help restrict the side effects of invariants. Another addition is support for invariants over pairs of states: the state before the transaction began, and the state about to be committed. This is accomplished with a new primitive: <code>old :: STM a -> STM a</code> which executes an STM action in the state as it was when the current transaction began. Finally, there is some new discussion of drawing on the work in databases where a distinction is made between <emph>assertions</emph>, which detect error conditions, and <emph>triggers</emph>, which are part of the programmes logic.<br /><br />A good paper made even better!<br /><br /><a href="http://lambda-the-ultimate.org/node/1500">LtU</a> | <a href="http://del.icio.us/url/68409cb20fbd4fa0de7679484eb8b147">Del.icio.us</a><br /><br /><span class="tags"><strong>Tags:</strong> <a rel="tag" href="http://del.icio.us/thsutton/cs">CS</a> <a rel="tag" href="http://del.icio.us/thsutton/papers">Papers</a> <a rel="tag" href="http://del.icio.us/thsutton/haskell">Haskell</a> </span>
